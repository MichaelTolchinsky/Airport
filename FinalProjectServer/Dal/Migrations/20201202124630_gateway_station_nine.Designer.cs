// <auto-generated />
using System;
using Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dal.Migrations
{
    [DbContext(typeof(AirportDbContext))]
    [Migration("20201202124630_gateway_station_nine")]
    partial class gateway_station_nine
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9");

            modelBuilder.Entity("Common.Models.ControlTower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ControlTower");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("Common.Models.ControlTowerStationRelation", b =>
                {
                    b.Property<int>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControlTowerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StationToId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Direction", "ControlTowerId", "StationToId");

                    b.HasIndex("ControlTowerId");

                    b.HasIndex("StationToId")
                        .IsUnique();

                    b.ToTable("ControlTowerStationRelation");

                    b.HasData(
                        new
                        {
                            Direction = 0,
                            ControlTowerId = 1,
                            StationToId = 1
                        },
                        new
                        {
                            Direction = 1,
                            ControlTowerId = 1,
                            StationToId = 6
                        },
                        new
                        {
                            Direction = 1,
                            ControlTowerId = 1,
                            StationToId = 7
                        });
                });

            modelBuilder.Entity("Common.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControlTowerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlightDirection")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlaneId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ControlTowerId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Common.Models.PlaneStationHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EnterStationTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExitStationTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("StationId");

                    b.ToTable("PlaneStationHistory");
                });

            modelBuilder.Entity("Common.Models.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CurrentFlightId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrentFlightId")
                        .IsUnique();

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        },
                        new
                        {
                            Id = 3
                        },
                        new
                        {
                            Id = 4
                        },
                        new
                        {
                            Id = 5
                        },
                        new
                        {
                            Id = 6
                        },
                        new
                        {
                            Id = 7
                        },
                        new
                        {
                            Id = 8
                        },
                        new
                        {
                            Id = 9
                        });
                });

            modelBuilder.Entity("Common.Models.StationRelation", b =>
                {
                    b.Property<int>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StationFromId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StationToId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Direction", "StationFromId", "StationToId");

                    b.HasIndex("StationFromId");

                    b.HasIndex("StationToId");

                    b.ToTable("StationRelation");

                    b.HasData(
                        new
                        {
                            Direction = 0,
                            StationFromId = 1,
                            StationToId = 2
                        },
                        new
                        {
                            Direction = 0,
                            StationFromId = 2,
                            StationToId = 3
                        },
                        new
                        {
                            Direction = 0,
                            StationFromId = 3,
                            StationToId = 4
                        },
                        new
                        {
                            Direction = 0,
                            StationFromId = 4,
                            StationToId = 5
                        },
                        new
                        {
                            Direction = 0,
                            StationFromId = 5,
                            StationToId = 6
                        },
                        new
                        {
                            Direction = 0,
                            StationFromId = 5,
                            StationToId = 7
                        },
                        new
                        {
                            Direction = 0,
                            StationFromId = 5,
                            StationToId = 9
                        },
                        new
                        {
                            Direction = 1,
                            StationFromId = 6,
                            StationToId = 8
                        },
                        new
                        {
                            Direction = 1,
                            StationFromId = 7,
                            StationToId = 8
                        },
                        new
                        {
                            Direction = 1,
                            StationFromId = 8,
                            StationToId = 4
                        });
                });

            modelBuilder.Entity("Common.Models.ControlTowerStationRelation", b =>
                {
                    b.HasOne("Common.Models.ControlTower", "ControlTower")
                        .WithMany("StartupStations")
                        .HasForeignKey("ControlTowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Station", "StationTo")
                        .WithOne("ControlTowerStationRelation")
                        .HasForeignKey("Common.Models.ControlTowerStationRelation", "StationToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Models.Flight", b =>
                {
                    b.HasOne("Common.Models.ControlTower", "ControlTower")
                        .WithMany("Flights")
                        .HasForeignKey("ControlTowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Models.PlaneStationHistory", b =>
                {
                    b.HasOne("Common.Models.Flight", "Flight")
                        .WithMany("FlightHistory")
                        .HasForeignKey("FlightId");

                    b.HasOne("Common.Models.Station", "Station")
                        .WithMany("StationHistory")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Models.Station", b =>
                {
                    b.HasOne("Common.Models.Flight", "CurrentFlight")
                        .WithOne("Station")
                        .HasForeignKey("Common.Models.Station", "CurrentFlightId");
                });

            modelBuilder.Entity("Common.Models.StationRelation", b =>
                {
                    b.HasOne("Common.Models.Station", "StationFrom")
                        .WithMany("ChildrenStations")
                        .HasForeignKey("StationFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Station", "StationTo")
                        .WithMany("ParentStations")
                        .HasForeignKey("StationToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
